---
import logosrc from '~/assets/logo.png?url'

function splitHash(hash: string)
{
	const numParts = Math.max(1, Math.min(4, Math.floor(hash.length / 4)))
	// Divide the hash into `numParts` equal parts
	const partMinLength = Math.floor(hash.length / numParts)
	const extraLength = hash.length % numParts
	const parts = []
	for (let i = 0, startIndex = 0; i < numParts; ++i)
	{
        const partLength = partMinLength + (i < extraLength ? 1 : 0)
        parts.push(hash.slice(startIndex, startIndex + partLength))
        startIndex += partLength;
	}
	return parts
}

const data = Astro.props.data || {}
const version = data.version || import.meta.env.GITHUB_SHA || 'dev'
---

<div class="main">

	<div class="content-wrapper">

		<div class="content-header">
			<!-- <div class="side">
				&nbsp;
			</div> -->
			<img src={logosrc} alt="FluffEvent logo" />
			<div class="overlay">
				<p class="version">
					<Fragment set:html={splitHash(version).join('<br />')} />
				</p>
			</div>
		</div>

		{version === 'dev' && (
			<div class="content-watermark">
				<p class="specimen">
					SPECIMEN
				</p>
			</div>
		)}

		<div class="content-body">
			<slot /> <!-- Rendered content -->
		</div>

		<div class="content-footer two-columns">
			<div class="left">
			</div>
			<div class="right">
				<p>Page <span class="page-number">00</span> / <span class="page-count">00</span></p>
			</div>
		</div>

	</div>

</div>

<style lang="scss" is:global>
@page {
	size: A4;
	margin-top: 13.2mm; // Instead of 19mm for the header
	margin-left: 19mm;
	margin-right: 13.2mm;
	margin-bottom: 19mm;
}
</style>

<style lang="scss">
.main {
	@apply flex flex-col justify-start items-center;

	.content-wrapper {
		@apply relative flex flex-col;
		@apply bg-white;
		width: 210mm;
		@apply m-8 mb-16;
		padding-top: 19mm;
		padding-left: 19mm;
		padding-right: 13.2mm;
		padding-bottom: 19mm;
		@apply border border-solid border-gray-300;
		@apply shadow-lg;
		font-family: 'Noto Serif Variable', 'Georgia', serif;

		&.print-sized {
			height: 297mm;
		}

		@media print {
			@apply bg-inherit w-full m-0;
			@apply border-0 shadow-none;
		}

		.content-header {
			@apply relative flex justify-center items-end;
			@apply w-full h-24;
			margin-top: calc(13.2mm - 19mm);
			margin-bottom: calc(19mm - 13.2mm);

			.overlay {
				@apply absolute inset-0 flex justify-center items-center;
				@apply opacity-10;
			}

			img {
				@apply max-h-full;
			}

			.version {
				@apply text-sm font-semibold;
				@apply break-after-avoid;
			}
		}

		.content-watermark {
			@apply hidden;
			@apply opacity-20;

			@media print {
				@apply absolute inset-0 flex justify-center items-center;
			}

			.specimen {
				@apply text-9xl text-center font-bold text-red-500;
				// Rotate 45 degrees
				transform: rotate(-45deg);
			}
		}

		.content-body {
			@apply flex-grow;
		}

		.content-footer {
			@apply flex justify-between items-start gap-4;
			@apply mt-8;
			margin-top: calc(19mm - 13.2mm);
			margin-bottom: calc(13.2mm - 19mm);

			.left, .right {
				@apply flex flex-col justify-center items-start;
				@apply flex-grow;
				flex-basis: 100%;
			}

			.right {
				@apply items-end;
			}
		}
	}

	:global(h1) {
		@apply mb-8 text-3xl text-center font-bold;
		@apply break-after-avoid;
	}

	:global(h2) {
		@apply mb-4 text-xl font-bold;
		@apply break-after-avoid;
	}

	:global(h3) {
		@apply mb-4 text-lg font-semibold;
		@apply break-after-avoid;
	}

	:global(h4) {
		@apply mb-4 text-base font-semibold;
		@apply break-after-avoid;
	}

	:global(p), :global(ul), :global(ol) {
		@apply mb-4;

		+ :global(h1), + :global(h2), + :global(h3), + :global(h4) {
			@apply mt-8;
		}
	}

	:global(ul), :global(ol) {
		@apply ml-8 list-outside;
		list-style-type: '-';

		> :global(li) {
			@apply pl-4;
		}
	}

	:global(hr) {
		@apply mx-0 my-8 border-t border-gray-300;
		@apply break-after-page;

		@media print {
			@apply m-0 border-0;
		}
	}

	:global(blockquote) {
		@apply mb-4 pl-4 pt-2 pb-4;
		@apply border-l-2 border-gray-300;

		> :global(*:last-child) {
			@apply mb-0;
		}
	}

	:global(table) {
		@apply w-full border-collapse;

		:global(td) {
			@apply bg-clip-padding;
			@apply border-0 border-transparent;
		}

		:global(thead th) {
			@apply font-semibold align-bottom;
		}

		:global(thead + tbody tr > td), :global(tr + tr > td) {
			@apply border-t-[1rem];
		}

		:global(tr > td + td) {
			@apply border-l-[0.5rem];
		}
	}

	:global(div.text-center) {
		@apply mb-6;
	}

	:global(span.input-line) {
		@apply relative inline-block;
		@apply w-1/4 mx-1;

		&::before {
			@apply absolute block;
			@apply w-full mt-0.5;
			@apply border-b border-gray-400 border-dashed;
			content: '';
		}

		&:global(.input-line-long), &:global(.input-line-long) {
			@apply w-full;
		}
	}

	:global(.signature) {
		@apply p-2 max-w-[80%];
		@apply border-b border-l border-gray-300 rounded-bl-lg;

		:global(.faded-text) {
			@apply text-gray-500 text-sm;
		}
	}
}

*:last-child {
	margin-bottom: 0 !important;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () =>
{
	// Find "<em>[ ... ]</em>"
	// Replace with "<div class="signature"><span class="faded-text">...</span></div>"
	document.querySelectorAll('p, strong, em, span, li, td').forEach((element) =>
	{
		const textMatch = element.textContent?.match(/^\[\[ ([^\]]+) \]\]$/)
		if (textMatch)
		{
			const [ _, description ] = textMatch
			const div = document.createElement('div')
			div.classList.add('signature')
			const divSpan = document.createElement('span')
			divSpan.classList.add('faded-text')
			divSpan.textContent = `${description}`
			div.appendChild(divSpan)

			if (['P', 'LI', 'TD'].includes(element.tagName))
			{
				element.innerHTML = ''
				element.appendChild(div)
			}
			else
			{
				element.replaceWith(div)
			}
		}
	})
})
</script>
