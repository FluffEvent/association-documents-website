---
import { getCollection } from 'astro:content'

import Layout from '~/layouts/Layout.astro'

import logosrc from '~/assets/logo.png?url'

export async function getStaticPaths()
{
	const blogEntries = await getCollection('documents');
	return blogEntries.map((entry: any) =>
		({
			params: {
				document: entry.slug,
			},
			props: {
				entry,
			},
		})
	)
}

const { entry } = Astro.props
const { Content } = await (entry as any).render()

function splitHash(hash: string)
{
	const numParts = 2
	// Divide the hash into `numParts` equal parts
	const partMinLength = Math.ceil(hash.length / numParts)
	const extraLength = hash.length % numParts
	const parts = []
	for (let i = 0, startIndex = 0; i < numParts; ++i)
	{
        const partLength = partMinLength + (i < extraLength ? 1 : 0)
        parts.push(hash.slice(startIndex, startIndex + partLength))
        startIndex += partLength;
	}
	return parts
}
---

<Layout>

	<div class="main">
		<div class="content-wrapper">

			<div class="content-header">
				<!-- <div class="side">
					&nbsp;
				</div> -->
				<img src={logosrc} alt="FluffEvent logo" />
				<div class="overlay">
					<!-- <p class="version">
						#{process.env.GITHUB_SHA || '36a1fd09cd8fac8c0b0410bda6fe5cdc4f0a079a'}
					</p> -->
					<p class="version">
						<Fragment set:html={splitHash(process.env.GITHUB_SHA || '36a1fd09cd8fac8c0b0410bda6fe5cdc4f0a079a').join('<br />')} />
					</p>
				</div>
			</div>

			<!-- Table hack for print layout -->
			<!-- https://medium.com/@Idan_Co/the-ultimate-print-html-template-with-header-footer-568f415f6d2a -->
			<table>
			<thead><tr><td>

				<div class="header-space">
					&nbsp;
				</div>

			</td></tr></thead>
			<tbody><tr><td>

				<div class="content-body">
					<Content />
				</div>

			</td></tr></tbody>
			<tfoot><tr><td>

				<div class="footer-space">
					&nbsp;
				</div>

			</td></tr></tfoot>
			</table>

		</div>
	</div>

</Layout>

<style lang="scss" is:global>
@media print {
}

@page {
	size: A4;
	margin-top: 13.2mm; // Instead of 19mm for the header
	margin-left: 19mm;
	margin-right: 13.2mm;
	margin-bottom: calc(36.7mm - 19mm + 13.2mm); // Instead of 36.7mm for the footer
}
</style>

<style lang="scss">
.main {
	@apply flex justify-center;

	.content-wrapper {
		@apply relative;
		@apply bg-white;
		width: 210mm;
		@apply m-8 mb-16;
		padding-top: 19mm;
		padding-left: 19mm;
		padding-right: 13.2mm;
		padding-bottom: 36.7mm;
		@apply border border-solid border-gray-300;
		@apply shadow-lg;
		@apply -z-20;

		@media print {
			@apply bg-inherit w-full m-0 p-0;
			@apply border-0 shadow-none;
		}

		.content-header {
			@apply relative flex justify-center items-end w-full h-24;
			margin-top: calc(13.2mm - 19mm);
			margin-bottom: calc(19mm - 13.2mm);

			@media print {
				@apply fixed top-0 my-0;
			}

			.overlay {
				@apply absolute inset-0 flex justify-center items-center;
				@apply opacity-10;
			}

			img {
				@apply max-h-full;
			}

			.version {
				@apply text-sm font-semibold;
				@apply break-after-avoid;
			}
		}

		.header-space {
			@apply h-0;

			@media print {
				height: calc(6rem + 19mm - 13.2mm);
			}
		}
	}

	:global(h1) {
		@apply mb-8 text-3xl text-center font-bold;
		@apply break-after-avoid;
	}

	:global(h2) {
		@apply mb-4 text-xl font-bold;
		@apply break-after-avoid;
	}

	:global(h3) {
		@apply mb-4 text-lg font-semibold;
		@apply break-after-avoid;
	}

	:global(h4) {
		@apply mb-4 text-base font-semibold;
		@apply break-after-avoid;
	}

	:global(p), :global(ul), :global(ol) {
		@apply mb-4;

		+ :global(h1), + :global(h2), + :global(h3), + :global(h4) {
			@apply mt-8;
		}
	}

	:global(p) {
		+ :global(ul), + :global(ol) {
			@apply -mt-4;
		}
	}

	:global(ul), :global(ol) {
		@apply ml-8 list-outside;
		list-style-type: '-';

		> :global(li) {
			@apply pl-4;
		}
	}

	:global(hr) {
		@apply mx-0 my-8 border-t border-gray-300;
		@apply break-after-page;

		@media print {
			@apply m-0 border-0;
		}
	}

	:global(.signature) {
		@apply mt-4 p-2 max-w-[80%];
		@apply border-b border-l border-gray-300 rounded-bl-lg;

		:global(.faded-text) {
			@apply text-gray-500 text-sm;
		}
	}
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () =>
{
	// Find "<em>[ Signature xxx (xxx) ]</em>"
	// Replace with "<div class="signature"><span class="faded-text">xxx (xxx)</span></div>"
	document.querySelectorAll('em').forEach((em) =>
	{
		const textMatch = em.textContent?.match(/\[ Signature ([^\]]+) \]/)
		if (textMatch)
		{
			const [_, description] = textMatch
			const div = document.createElement('div')
			div.classList.add('signature')
			const divSpan = document.createElement('span')
			divSpan.classList.add('faded-text')
			divSpan.textContent = `${description}`
			div.appendChild(divSpan)
			em.replaceWith(div)
		}
	})
})
</script>
